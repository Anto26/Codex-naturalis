---
title: Stati
---
classDiagram
    Match --> GameDeck
    Match --> MatchState
    Match --> DrawSource
    Match -- Player
    MatchState <|-- WaitState
    MatchState <|-- SetupState
    MatchState <|-- ChoosePlayerState
    MatchState <|-- ChooseSecretObjectiveState
    MatchState <|-- UpdatePlayerStatusState
    MatchState <|-- DrawPhaseState
    MatchState <|-- RankingsState

    Card <|-- InitialCard
    Card <|-- PlayableCard
    GameDeck --> Card
    PlayableCard <|-- ResourceCard
    PlayableCard <|-- GoldCard

    Requirement <|-- QuantityRequirement
    Requirement <|-- PositionRequirement
    Requirement <-- Objective
    QuantityRequirement <-- GoldCard

    Board --> PlacedCard
    Player --> Board
    Player --> Objective
    CardFace <-- Card
    Symbol <-- CardFace
    Player --> Color
    Board --> Requirement
    %%Side <-- Player
    %%Side <-- Match
    Side <-- PlacedCard
    %%Symbol <-- GoldCard
    %% DrawSource <-- Player



    class Symbol {
        <<Enumeration>>
        ANIMAL
        PLANT
        INSECT
        FUNGUS
        FEATHER
        INKWELL
        PARCHMENT
        EMPTY_CORNER
        FULL_CORNER
        CORNER_OBJ
    }

    class CardFace {
        - topLeft: Symbol
        - topRight: Symbol
        - bottomLeft: Symbol
        - bottomRight: Symbol
        - center: Set~Symbol~
        + CardFace(Symbol topLeft, Symbol topRight, Symbol bottomLeft, Symbol bottomRight, Set~Symbol~ center)
    }

    class Card {
        <<Abstract>>
        - front: CardFace
        - back: CardFace
    }

    class PlayableCard {
        <<Abstract>>
        - points: int
    }

    class InitialCard {
        + InitialCard(CardFace front, CardFace back)
    }

    class ResourceCard {
        + ResourceCard(CardFace front, CardFace back, int points)
    }

    class GoldCard {
        - multiplier: Symbol
        - req: QuantityRequirement
        + GoldCard(CardFace front, CardFace back, int points, Symbol multiplier, QuantityRequirement req)
        + totPoints(Board) int
    }

    class Requirement {
        <<Abstract>>
        + isSatisfied(Board bord) bool
    }

    class QuantityRequirement {
        - reqs : Map~Integer, Symbol~
        + QuantityRequirement(Symbol simbol, Integer quantity)
    }

    class PositionRequirement {
        - reqs: Map&ltPair&ltInteger, Integer&gt, Color&gt
        + PositionRequirement(Map&ltPair&ltInteger, Integer&gt, Color&gt)
    }
    class Objective {
        - points: int
        - req: Requirement
        + Objective(int points, Requirement req)
    }
    class Player {
        - nickname: String
        - match: Match
        - points: Int
        - board: Board
        - resources: Map<Symbol, Integer>
        - color: Color
        - objective: Objective

        + Player(String nickname, Match match)
        + playCard(Pair<Integer, Integer> coord, PlayableCard card, Side side)
        + drawCard(DrawSource draw)
        + chooseObjective(Objective objective)
        + getBoard() Board
    }
    class Color{
        <<Enumeration>>
        RED
        BLUE
        GREEN
        YELLOW
    }
    class Side{
        <<Enumeration>>
        FRONT
        BACK
    }
    class Board {
        - currentHand: List~PlayableCard~
        - placed: Map&ltPair&ltInteger,Integer&gt, PlacedCard&gt

        + Board()
        + getCurrentHand() List~PlayableCard~
        + addCardHand(PlayableCard card) void
        + removeCardHand(PlayableCard card) void
        + checkRequirement(Requirement req)
        + placeCard(Pair<Integer, Integer>, Card card, Side side) Map~Symbols, Integer~
    }
    class PlacedCard {
        - card: Card
        - turn: int
        + PlacedCard(Card card, int turn)
    }

    class Match {
        - players: list~Players~
        - maxPlayers: Int
        - currState: MatchState
        - currentPlayer: Player
        - resourcesDeck: ResourcesDeck
        - goldsDeck: GoldsDeck
        - visibleGolds: Pair<GoldCard, GoldCard>
        - visibleResources: Pair<ResourceCard>
        - visibleObjectives: Pair<Objective, Objective>

        + Match(int maxPlayers) void
        + setState() void
        + isFull() bool
        + addPlayer(Player player) void
        + removePlayer(Player player) void
        + getCurrentPlayer() Player
        + chooseSecretObjective(Objective obj) void
        + getSecretObjectives() Pair~Objective, Objective~
        + makeMove(Player player, Pair~Integer, Integer~ coords, PlayableCard card, Side side) void
        + drawCard(Player player, DrawSource draw) PlayableCard
        - setupMatch() void

    }
    class DrawSource {
        <<Enumeration>>
        GOLDS_DECK,
        RESOURCES_DECK,
        FIRST_VISIBLE_GOLDS,
        SECOND_VISIBLE_GOLDS,
        FIRST_VISIBLE_RESOURCES,
        SECOND_VISIBLE_RESOURCES
    }

    class MatchState {
        <<Abstract>>
        + match: Match
        + transition() void
        + join() void
        + quit() void
    }

    class WaitState{
        + WaitState() void
        + transition() void
        + join() void
        + quit() void
    }
    class SetupState{
        + SetupState() void
        + transition() void

    }
    class ChoosePlayerState {
        + ChoosePlayerState() void
        + transition() void
    }

    class ChooseSecretObjectiveState {
        + ChooseSecretObjectiveState() void
        + transition() void
    }

    class UpdatePlayerStatusState {
        + UpdatePlayerStatusState() void
        + transition() void
    }

    class DrawPhaseState {
        + DrawPhaseState() void
        + transition() void
    }

    class RankingsState{
        + RankingsState() void
        + transition() void
    }


    class GameDeck {
        <<Generics>>
        - int size
        - cardList: List~U~
        + GameDeck(int size)
        + add(U card) void
        + pop() U
        + shuffle() void
        + isEmpty() void
    }

