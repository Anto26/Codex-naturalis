---
title: Model diagram
---
classDiagram
    Match --> GameDeck
    Match --> MatchState
    Match --> DrawSource
    Match -- Player
    MatchState <|-- WaitState
    MatchState <|-- SetupState
    MatchState <|-- NextTurnState
    MatchState <|-- ChooseSecretObjectiveState
    MatchState <|-- AfterMoveState
    MatchState <|-- AfterDrawState
    MatchState <|-- FinalState

    Card <|-- InitialCard
    Card <|-- PlayableCard
    GameDeck --> Card
    PlayableCard <|-- ResourceCard
    PlayableCard <|-- GoldCard

    Requirement <|-- QuantityRequirement
    Requirement <|-- PositionRequirement
    Requirement <-- Objective
    QuantityRequirement <-- GoldCard

    Board --> PlacedCard
    Player --> Board
    Player --> Objective
    CardFace <-- Card
    Symbol <-- CardFace
    Player --> Color
    Board --> Requirement
    %%Side <-- Player
    %%Side <-- Match
    Side <-- PlacedCard
    %%Symbol <-- GoldCard
    %% DrawSource <-- Player



    class Symbol {
        <<Enumeration>>
        ANIMAL
        PLANT
        INSECT
        FUNGUS
        FEATHER
        INKWELL
        PARCHMENT
        EMPTY_CORNER
        FULL_CORNER
        CORNER_OBJ
    }

    class CardFace {
        <<Record>>
        - topLeft: Symbol
        - topRight: Symbol
        - bottomLeft: Symbol
        - bottomRight: Symbol
        - center: Set~Symbol~
        + CardFace(Symbol topLeft, Symbol topRight, Symbol bottomLeft, Symbol bottomRight, Set~Symbol~ center)
    }

    class Card {
        <<Abstract>>
        # front: CardFace
        # back: CardFace
    }

    class PlayableCard {
        <<Abstract>>
        # points: int
    }

    class InitialCard {
        + InitialCard(CardFace front, CardFace back)
    }

    class ResourceCard {
        + ResourceCard(CardFace front, CardFace back, int points)
    }

    class GoldCard {
        - multiplier: Symbol
        - req: QuantityRequirement
        + GoldCard(CardFace front, CardFace back, int points, Symbol multiplier, QuantityRequirement req)
        + totPoints(Board board) int
    }

    class Requirement {
        <<Abstract>>
        + isSatisfied(Board board) bool
    }

    class QuantityRequirement {
        - reqs : Map~Integer, Symbol~
        + QuantityRequirement(Symbol simbol, Integer quantity)
    }

    class PositionRequirement {
        - reqs: Map&ltPair&ltInteger, Integer&gt, Color&gt
        + PositionRequirement(Map&ltPair&ltInteger, Integer&gt, Color&gt)
    }
    class Objective {
        - points: int
        - req: Requirement
        + Objective(int points, Requirement req)
    }
    class Player {
        - nickname: String
        - match: Match
        - points: Int
        - board: Board
        - color: Color
        - objective: Objective

        + Player(String nickname, Match match)
        + playCard(Pair<Integer, Integer> coord, PlayableCard card, Side side) void
        + drawCard(DrawSource draw) void
        + chooseObjective(Objective objective) void
        + getBoard() Board
        + getPoints() int
        + getSecretObjective() Objective
        + getColor() Color
        # setColor() void
    }
    class Color{
        <<Enumeration>>
        RED
        BLUE
        GREEN
        YELLOW
    }
    class Side{
        <<Enumeration>>
        FRONT
        BACK
    }
    class Board {
        - currentHand: List~PlayableCard~
        - placed: Map&ltPair&ltInteger,Integer&gt, PlacedCard&gt
        - availableResources: Map~Symbol, Integer~

        + Board()
        + getCurrentHand() List~PlayableCard~
        + addHandCard(PlayableCard card) void
        + setInitialSide(Side side) void
        + removeCardHand(PlayableCard card) void
        + checkRequirement(Requirement req) bool
        + placeCard(Pair~Integer, Integer~, Card card, Side side) int
        + verifyCardPlacement(Pair~Integer, Integer~) bool
    }
    class PlacedCard {
        <<Record>>
        - card: Card
        - turn: int
        + PlacedCard(Card card, int turn)
    }

    class Match {
        - players: list~Players~
        - maxPlayers: int
        - currState: MatchState
        - currentPlayer: Player
        - initialsDeck: GameDeck~InitialCard~
        - resourcesDeck: GameDeck~ResourceCard~
        - goldsDeck: GameDeck~GoldCard~
        - objectivesDeck: GameDeck~Objective~
        - visibleGolds: Pair~GoldCard, GoldCard~
        - visibleResources: Pair~ResourceCard, ResourceCard~
        - visibleObjectives: Pair~Objective, Objective~
        - currentProposedObjectives: Pair~Objective, Objective~
        - started: bool
        - lastTurn: bool
        - finished: bool

        + Match(int maxPlayers, resourceDeck ) void
        + isFull() bool
        + isStarted() bool
        + isFinished() bool
        + addPlayer(Player player) void
        + removePlayer(Player player) void
        + getCurrentPlayer() Player
        + getPlayers() List~Player~
        # getPoints() int
        # addPoints() void
        # chooseSecretObjective(Objective obj) void
        # proposeSecretObjectives() Pair~Objective, Objective~
        # makeMove(Pair~Integer, Integer~ coords, PlayableCard card, Side side) void
        # drawCard(Player player, DrawSource draw) PlayableCard
        # doStart() void
        # doFinish() void
        # setState() void
        # setupDecks() void
        # setupPlayers() void
        # setupBoards() void
        # nextPlayer() void

    }
    class DrawSource {
        <<Enumeration>>
        GOLDS_DECK,
        RESOURCES_DECK,
        FIRST_VISIBLE_GOLDS,
        SECOND_VISIBLE_GOLDS,
        FIRST_VISIBLE_RESOURCES,
        SECOND_VISIBLE_RESOURCES
    }

    class MatchState {
        <<Abstract>>
        + match: Match
        + MatchState(Match match)
        + transition() void
        + addPlayer() void
        + removePlayer() void
	    + proposeSecretObjectives() void
	    + chooseSecretObjective() void
	    + makeMove() void
	    + drawCard() void

    }

    class WaitState{
        + WaitState(Match match) void
        + transition() void
        + addPlayer() void
        + removePlayer() void
    }
    class SetupState{
        + SetupState(Match match) void
        + transition() void

    }
    class NextTurnState {
        + NextTurnState(Match match) void
        + proposeSecretObjectives() void
        + makeMove() void
        + transition() void
    }

    class ChooseSecretObjectiveState {
        + ChooseSecretObjectiveState() void
        + chooseSecretObjective() void
        + transition() void
    }

    class AfterMoveState {
        + AfterMoveState() void
        + drawCard() void
        + transition() void
    }

    class AfterDrawState {
        + AfterDrawState() void
        + transition() void
    }

    class FinalState{
        + FinalState() void
        + transition() void
    }


    class GameDeck {
        <<Generics>>
        - int size
        - cardsList: List~U~
        + GameDeck(int size)
        + add(U card) void
        + pop() U
        + shuffle() void
        + isEmpty() void
    }

